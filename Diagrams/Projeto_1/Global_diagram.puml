@startuml
'https://plantuml.com/class-diagram
package esinf{
package info{
class CompletedInfo
{
    - completedInfo : TreeMap<String,CountryInfo>
    + CompletedInfo()
    + add(fruitName : String, country : CountryInfo) : void
    + containsFruit(fruit : String) : boolean
    + containsCountry(fruit : String, country : String) : boolean
    + addAnotherYear(fruit : String, country : String, year : int, quantity : int) : void
    + addNewCountry(fruit : String, country : String, year : int, quantity : int) : void
    + addNewFruitAndCountry(fruit : String, country : String, year : int, quantity : int) : void
    + newYearInfo(year : int, quantity : int) : YearInfo
    + newCountry(country : String, year : YearInfo) : CountryInfo
    + iterator() : Iterator<FruitEntry>
    + hashCode() : int
    + valueSort() : List<String>
    + countrysNumberMaxQuantity() : List<Pair<String, Integer>>
}

class CountryInfo{
 - countryInfo : TreeMap<String, YearInfo>
 + CountryInfo()
 + add(country : String, year : YearInfo) : void
 + containsCountry(country : String)
 + equals(o : Object) : boolean
 + hashCode() : int
 + iterator() : Iterator<CountryEntry>
 }

 class YearInfo{
 + YearInfo()
 + add(year : int, quantity : int) : void
 + equals(o Object) : boolean
 + hashCode() : int
 + iterator() : Iterator<YearEntry>
 }

}
package entries{
class CountryEntry{
- country : String
- year : YearInfo
+ CountryEntry(country : String, year : YearInfo)
+ CountryEntry()
}

class FruitEntry{
- fruit : String
- country : CountryInfo
+ FruitEntry(fruit : String, country : CountryInfo)
}

class YearEntry{
- year : int
- quantity : int
+ YearEntry(year : int, quantity : int)
}
}

package iterators{
class CountryInfoIterator{
current : Map.Entry<String, YearInfo>
list : TreeMap<String, YearInfo>
+ CountryInfoIterator(list : TreeMap<String, YearInfo>)
+ hasNext() : boolean
+ next() : T
+ remove() : void
}

class FruitInfoIterator{
current : Map.Entry<String, YearInfo>
list : TreeMap<String, YearInfo>
+ FruitInfoIterator(list : TreeMap<String, YearInfo>)
+ hasNext() : boolean
+ next() : T
+ remove() : void
}

class YearInfoIterator{
current : Map.Entry<String, YearInfo>
list : TreeMap<String, YearInfo>
+ YearInfoIterator (list : TreeMap<Integer,Integer>)
+ hasNext() : boolean
+ next() : T
+ remove() : void
}
}
class CountryYearQuantity{
- country : String
- quantity : int
- year : int
+ CountryYearQuantity(country : String, year : int, quantity : int)
}




package exceptions{
class FruitNotFoundException{
+ FruitNotFoundException(message : String)
}
}
class FruitProductionDifference{
yearBefore : int
yearAfter : int
fruit : String
productionDifference : int
+ FruitProductionDifference(yearBefore : int, yearAfter: int, fruit : String, productionDifference : int)
+ FruitProductionDifference()
+ biggestValueDifferenceData (productionList : CompletedInfo, searchedCountry : String) : FruitProductionDifference
+ toString() : String
+ equals(o : Object) : boolean
}

class MinimumNumberOfCountriesForQ{
+ {static} MinimumNumberOfCountriesForQ(allInfo : CompletedInfo, wantedQuantity : BigInteger) : Integer
+ {static} ProcessCompletedInfoForExercise3(allInfo : CompletedInfo) : TreeMap<String, BigInteger>
}

class Pair{
- left : T
- right : U
+ Pair(left : T, right : U)
+ compareTo(o2 : Pair<T,U>) : int
}

class Store_Data{
+ storeInfo(fileName : String) : CompletedInfo
}







interface Iterable{
}

interface Iterator{
}

interface Exception{
}

'CountryInfo
CountryInfo --> YearInfo
CountryInfo --|> Iterable

'CountryInfoIterator
CountryInfoIterator -[dashed]---|> Iterator
CountryInfoIterator <-- CountryInfo : returns

'CountryEntry
CountryEntry <-- CountryInfoIterator : returns

'CountryYearQuantity
CountryYearQuantity <.. CompletedInfo : uses

'CompletedInfo
CompletedInfo --> CountryInfo
CompletedInfo -[dashed]-|> Iterable
CompletedInfo ---> Pair: uses

'Store_Data
Store_Data --> CompletedInfo : uses

'YearEntry
YearEntry <-- YearInfoIterator : returns

'YearInfo
YearInfo -[dashed]-|> Iterable

'YearInfoIterator
YearInfoIterator -[dashed]---|> Iterator
YearInfoIterator <-- YearInfo : returns

'FruitEntry
FruitEntry <-- FruitInfoIterator : returns

'FruitInfoIterator
FruitInfoIterator -[dashed]---|>Iterator
FruitInfoIterator <-- CompletedInfo : returns

'MinimumNumberOfCountriesForQ
MinimumNumberOfCountriesForQ-->CompletedInfo : uses
MinimumNumberOfCountriesForQ-->FruitEntry : uses
MinimumNumberOfCountriesForQ-->CountryEntry : uses
MinimumNumberOfCountriesForQ-->YearEntry : uses

'FruitProductionDifference
FruitProductionDifference  ---> YearInfoIterator: uses
FruitProductionDifference --->  FruitInfoIterator: uses

'FruitNotFoundException
FruitNotFoundException ...|> Exception
FruitNotFoundException <.. CompletedInfo : uses

}


@enduml